---
title: Quarto 1.3 Pre-release Notes
date: last-modified
search: false
code-annotations: select
---

## HTML Grid Customization

### Background

Quarto HTML documents are arranged in a structure composed of a sidebar, the body of the document, the margin of the document, and the margins between these elements (gutters). This is illustrated below:

![](images/grid.png)

Quarto documents arrange these elements to support different styles of layout (docked, floating), different variants of the layout based upon the content of the page (for example, a slightly adjusted layout for pages containing only a listing), and responsive sizes for each of the layouts. In each of these different layouts, Quarto adjusts the width, positioning, or visibility of the elements to achieve the desired result. Each of these elements have both a maximum and minimum width, allowing content to flow depending upon the width of the browser that is displaying the document. 

The total maximum page width for a Quarto page is determined by the sum of each of these element widths. Quarto constrains the page to the width of the browser itself when possible, scaling the width of the elements to best fit the currently available display.

In Quarto 1.2, the various widths of each of these elements was predefined in Quarto and wasn't customizable without replacing the entire CSS grid system used by Quarto.

### Customization

Starting in Quarto v1.3, you may control the width of the sidebar, body, margin, and gutter of HTML page layouts using YAML or SCSS variables. The width(s) that you provide will specify the maximum width for the element and will be used as a baseline value when computing minimum sizes for the elements. In addition, Quarto will use the width(s) that you provide to derive all the various widths for the differing grid styles and responsive sizes (by scaling the maximum value that you provide).

To set these options in YAML, you may use:

``` yml
format:
  html: 
    grid:
      sidebar-width: 300px
      body-width: 900px
      margin-width: 300px
      gutter-width: 1.5rem
```

Similarly, in a custom theme `scss` file, you may set variables like:

``` css
// The left hand sidebar
$grid-sidebar-width: 250px !default;

// The main body
$grid-body-width: 800px !default;

// The right hand margin bar
$grid-margin-width: 250px !default;

// The gutter that appears between the above columns
$grid-column-gutter-width: 1.5rem !default;
```

`sidebar-width`, `body-width`, and `margin-width` should be specified in pixels (`px`) as the values will be used when computing other sizes. Requiring pixel sizing is a limitation of our approach to the Quarto's layout, but also typically makes sense since the overall document width is usually tied to the browser size and responive breakpoints rather than font size or other relative measures.

`gutter-width` may be specified in pixels or other units such as `em` or `rem` which are responsive to the document font size.

## Mermaid Diagram Theming

Quarto v1.3 updates Mermaid to version 9.2.2, and adds a number of theming options to diagram.

### Default Mermaid Theme

Starting in v1.3, Quarto will use the current theme's colors for Mermaid diagrams by default. If you use Quarto's bootswatch built-in themes (or a custom theme that uses the same SCSS variables), Mermaid diagrams in Quarto will automatically follow your project themes.

The SCSS variables used by the default Mermaid theme shipped with quarto, together with their default values, are:

``` scss
$mermaid-bg-color: $body-bg;
$mermaid-edge-color: $secondary;
$mermaid-node-fg-color: $body-color;
$mermaid-fg-color: $body-color;
$mermaid-fg-color--lighter: $body-color-lighter;
$mermaid-fg-color--lightest: $body-color-lightest;
$mermaid-font-family: $font-family-sans-serif;
$mermaid-label-bg-color: $body-bg;
$mermaid-label-fg-color: $primary;
$mermaid-node-bg-color: $primary-transparent;
$mermaid-node-fg-color: $primary;
```

These have CSS variable counterparts that can also be overridden:

``` css
:root {
  --mermaid-bg-color: #{$mermaid-bg-color};
  --mermaid-edge-color: #{$mermaid-edge-color};
  --mermaid-node-fg-color: #{$mermaid-node-fg-color};
  --mermaid-fg-color: #{$mermaid-fg-color};
  --mermaid-fg-color--lighter: #{$mermaid-fg-color--lighter};
  --mermaid-fg-color--lightest: #{$mermaid-fg-color--lightest};
  --mermaid-font-family: #{$mermaid-font-family};
  --mermaid-label-bg-color: #{$mermaid-label-bg-color};
  --mermaid-label-fg-color: #{$mermaid-label-fg-color};
  --mermaid-node-bg-color: #{$mermaid-node-bg-color};
  --mermaid-node-fg-color: #{$mermaid-node-fg-color};
}
```

### Built-in Themes

If you want to use Mermaid's own themes, you can do so by configuring the `mermaid` option in your YAML front matter:

``` yml
html:
  mermaid:
    theme: forest
```

The available themes from mermaid are: `default`, `dark`, `forest`, and `neutral`.

## `kbd` Shortcode

The `kbd` shortcode can be used to describe keyboard shortcuts in documentation. On Javascript formats, it will attempt to detect the operating system of the format and show the correct shortcut. On print formats, it will print the keyboard shortcut information for all operating systems.

Minimal example:

``` md
To print, press {{{< kbd Shift-Ctrl-P >}}}. To open an existing new project, press {{{< kbd mac=Shift-Command-O win=Shift-Control-O linux=Shift-Ctrl-L >}}}.
```

## Code Annotation

Both display and executable code cells in Quarto may now include annotations, which will be formatted and displayed properly in any format, but with special formatting for HTML and PDF output. Annotations for a code cell consist of two related elements:

1.  Special comments at the end of lines of code, which serve as the annotation markers.\
    Each annotated line should be terminated with a comment (using the code cell's language comment character) followed by a space and then an annotation number enclosed in angle brackets (e.g. `// <2>`). You may repeat an annotation number if the annotation spans multiple lines.
2.  An ordered list that appears immediately after the code cell which includes the contents of each annotation. Each numbered item in the ordered list will correspond with the line of code(s) with the same annotation number.

A very simple example is as follows:

```` markdown
```r
foo <- "bar"
print("Hello World!") # <1>
```
1. Here, we print the string 'Hello World'
````

which will result in the following:

::: panel-tabset
#### HTML

![](images/annote-html.png)

#### PDF

![](images/annote-pdf.png)

#### Docx

![](images/annote-docx.png)
:::

When annotations are output for non-HTML and non-PDF formats, the annotation numbers will instead be replaced with a label pointing to the line of code (or lines of code) to which the annotation text applies.

### HTML Annotation Styles

For HTML output, there are three options for the display style of annotations:

`below`

:   By default (or if `code-annotations: below` is specified), code annotation text will appear below the code cell.

`hover`

:   Code annotation text will be displayed when the user hovers over the annotation marker for a line of code.

`select`

:   Code annotation text will be displayed when the user clicks on an annotation marker (selecting it). The annotation text can be dismissed by clicking the annotation marker once again.

### Complete Example

The following input document will produce annotated code as displayed below.

```` markdown
---
...
code-annotations: select
...
---

```{{r}}
num = 47 # <1>
factorial = 1
if(num < 0) { # <2>
  print("Sorry, factorial does not exist for negative numbers")
} else if(num == 0) {
  print("The factorial of 0 is 1")
} else {
  for(i in 1:num) {             # <3>
    factorial = factorial * i   # <3>
  }                             # <3>
  print(paste("The factorial of", num ,"is",format(factorial)))
}
```

1. The number, this could instead be user input
2. Check is the number is negative, positive or zero
3. Actually compute the factorial
````

#### Example Annotated Code Cell

``` r
num = 47 # <1>
factorial = 1
if(num < 0) { # <2>
  print("Sorry, factorial does not exist for negative numbers")
} else if(num == 0) {
  print("The factorial of 0 is 1")
} else {
  for(i in 1:num) {             # <3>
    factorial = factorial * i   # <3>
  }                             # <3>
  print(paste("The factorial of", num ,"is",format(factorial)))
}
```

1.  The number, this could instead be user input
2.  Check is the number is negative, positive or zero
3.  Actually compute the factorial

### Removing Annotations

For some formats, you may prefer to remove annotations. In this case, you can set `code-annotations: none`, which will remove the annotation comments for your code and suppress the output of the ordered list which contains the annotation text.

### Disabling Code Annotation

You can disable code annotation by including the option `code-annotations: false` in your document. This will stop the processing of code annotations and leave your code (and the original ordered list as is).

## PDF Figure Rendering

### SVG Images

Starting in Quarto 1.3, we support rendering of PDF documents that include SVG files, automatically converting them to PDF images if `rsvg-convert`{spellcheck="false"} is available on the system path during rendering.

You can learn more about installing `libsvg`{spellcheck="false"} (which provides `rsvg-convert`{spellcheck="false"}), see <https://wiki.gnome.org/Projects/LibRsvg>. To install on specific platforms, follow the below instructions:

-   On MacOS, you an use Homebrew (<https://formulae.brew.sh/formula/libsvg>) `brew install libsvg`{spellcheck="false"}

-   Tarballs for Linux are available here: <https://download.gnome.org/sources/librsvg/>

-   On Windows, you can install using chocolatey [https://community.chocolatey.org/packages/r...](https://community.chocolatey.org/packages/râ€¦){.uri} `choco install rsvg-convert`{spellcheck="false"}

### Remote Images

Starting in Quarto 1.3, when rendering PDFs, Quarto will automatically fetch remote image references and properly embed them within the PDF.

{{< include _custom_ast.qmd >}}
